-create-react-app <name>
-npm install --save 
    react-redux 
    redux 
    redux-logger 
    redux-promise-middleware
    redux-thunk
-clean up files
-create store outside of components folder within src [ONLY INDEX.JS AND STORE.JS]
    STORE.JS =
        import { applyMiddleware, createStore } from 'redux';
        import logger from 'redux-logger';
        import thunk from 'redux-thunk';
        import promise from 'redux-promise-middleware';
        import reducer from './reducers';
    
        const middleware = applyMiddleware(promise(), thunk, logger());

        export default createStore(reducer, middleware);

        ^returns store that contains reducer and middleware for the app
        actions determine what reducer to run


-create reducers folder within src
-create index.js within reducers folder
    import { combineReducers } from 'redux';
    
    //app files 
    import tweets from './tweets-reducer';
    import user from './user-reducers';

    export default combineReducers({
        tweets,
        user
    });

-create users-reducer.js
    const initalState = {
        user: {
            id: null,
            name: null,
            age: null
        },
        fetching: false,
        fetched: false,
        error: null,
    };

    export default function reducer(state = initialState <set_to_default>, action) {
        switch(action.type) {
            default:
                return state;
        }
    }

-create tweets-reducer.js
-create actions folder within src
-create actions: ex. user-actions.js
    export const fetchUserType = 'FETCH_USER_FULFILLED';

    export function fetchUser() {
        return {
            type: fetchUserFulfilled,
            payload: {
                name: sam.
                age: 99
            }
        }
    }

    export const setUserNameType = 'SET_USER_NAME';

    export function setUserName(name) {
        return {
            type: setUserNameType,
            payload: name
        }
    }

    export const setUserAgeType = 'SET_USER_AGE';

    export function setUserAge(age) {
        return {
            type: setUserAgeType,
            payload: age
        }
    }

    tweets-actions.js

    export const fetchTweetsType = 'FETCH_TWEETS'
    export function fetchTweets() {
        return function(dispatch) {
            dispatch({type: fetchTweetsType});

            axios.get('https://rest.learncode.academy/api/reacttest/tweets')
                .then(response) => {
                    dispatch({type: fetchTweetsFulfilledType, payload: response.data});
                })
                .catch((err) => {
                    dispatch({type: fetchTweetsRejectedType, payload: err})
                })
        }
    }

    //reducer for addTweet(id, text)

    export const addTweetType = 'ADD_TWEET'
    export function addTweet(id, text) {
        return {
            type: addTweetType,
            payload: {
                id,
                text
            }
        }
    }

    //reducer for updateTweet(id, text)

    export const updateTweetType = 'UPDATE_TWEET'
    export function updateTweet(id, text) {
        return {
            type: updateTweetType,
            payload: {
                id,
                text
            }
        }
    }

    //reducer for deleteTweet(id)

    export const deleteTweetType = 'DELETE_TWEET'
    export function deleteTweet (id) {
        return {
            type: deleteTweetType,
            payload: id
        }
    }

-index.js within src
    import react
    import reactdom
    import { Provider } from 'react-redux';
    import store from './store';

    ReactDOM.render(<Prover store = {store}>
        
    </Provider>, document.getElementById('root));

-build components layout.js
    import react
    import { connect } from 'react-redux';

    import { fetchUser } from '../actions/user-actions';
    import { fetchTweets } from '../actions/tweets-actions';

    connect((store) => {
        return {
            user: store.user.user,
            userFetched: store.user.fetched,
            tweets: store.tweets.tweets
        }
    });

    export default class Layout extends Component {
        componentWillMount() {
            this.props.dispatch(fetchUser());
        }

        fetchTweets() {
            this.props.dispatch(fetchTweets());
        }

        render() {
            const { user, tweets } = this.props;

            if(!tweets.length) {
                return <button onClick={this.fetchTweets.bind(this)}> load tweets </button>
            }

            const mappedTweets = tweets.map(tweet => <li key={tweet.id}>{tweet.text}</li>)

            return(
                <div> 
                
                </div>
            )
        }

    }